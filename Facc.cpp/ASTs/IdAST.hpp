//
// This file is automatically generated by Facc
// https://github.com/fawdlstty/Fapp
//



#ifndef __ID_AST_HPP__
#define __ID_AST_HPP__



#include <iostream>
#include <memory>
#include <optional>
#include <string>
#include <string_view>

#include <fmt/core.h>

#include <Facc/IEnumerator.hpp>
#include <Facc/Parser/IAST.h>
#include <Facc/Parser/AstParser.hpp>



class IdAST: IAST {
public:
	// id ::= [a-zA-Z\x80-\xff_][0-9a-zA-Z\x80-\xff_]*

	std::shared_ptr<AstParser> Parser;

	IEnumerator<int> TryParse (int _pos) override {
		if (!Parser->TryReg ("IdAST", _pos))
			co_return;
		auto _0_enum = _try_parse_0 (_pos);
		while (_0_enum.MoveNext ()) {
			auto _1_enum = _try_parse_1 (_0_enum.Current);
			while (_1_enum.MoveNext ()) {
				co_yield _1_enum.Current;
			}
		}
		Parser->UnReg ("IdAST", _pos);
	}

	IEnumerator<int> _try_parse_0 (int _pos);
	IEnumerator<int> _try_parse_1 (int _pos);
	bool IsValid () override;
	void PrintTree (int _indent);
	int size ();

	std::string Value_0 = "";
	std::string Value_1 = "";
};



inline bool IdAST::IsValid () {
	return (Value_0.size () > 0 && true);
}

inline void IdAST::PrintTree (int _indent) {
	std::cout << std::string (_indent * 4, ' ') << "IdAST" << std::endl;
	std::cout << std::string ((_indent + 1) * 4, ' ') << '[' << Value_0 << ']' << std::endl;
	std::cout << std::string ((_indent + 1) * 4, ' ') << '[' << Value_1 << ']' << std::endl;
}

inline int IdAST::size () {
	int _len = 0;
	_len += Value_0.size ();
	_len += Value_1.size ();
	return _len;
}
inline IEnumerator<int> IdAST::_try_parse_0 (int _pos) {
	Parser->SetErrorPos (_pos);
	Value_0 = "";
	std::optional<char> _ch;
	auto _check_0 = [] (char _c) { return (_c >= 'a' && _c <= 'z') || _c == 'z' || (_c >= 'A' && _c <= 'Z') || _c == 'Z' || (_c >= '\x80' && _c <= '\xff') || _c == '\xff' || _c == '_'; };
	if ((_ch = Parser->TryGetChar (_pos, _check_0)).has_value ()) {
		Value_0 += _ch.value ();
		co_yield _pos + 1;
		Value_0 = "";
	}
}

IEnumerator<int> IdAST::_try_parse_1 (int _pos) {
	Parser->SetErrorPos (_pos);
	Value_1 = "";
	std::optional<char> _ch;
	int _pos0 = _pos;
	auto _check_1 = [] (char _c) { return (_c >= '0' && _c <= '9') || _c == '9' || (_c >= 'a' && _c <= 'z') || _c == 'z' || (_c >= 'A' && _c <= 'Z') || _c == 'Z' || (_c >= '\x80' && _c <= '\xff') || _c == '\xff' || _c == '_'; };
	while ((_ch = Parser->TryGetChar (_pos0++, _check_1)).has_value ())
		Value_1 += _ch.value ();
	if (Value_1.size () > 0) {
		co_yield _pos + Value_1.size ();
		Value_1 = "";
	}
	co_yield _pos;
}



#endif // __ID_AST_HPP__
