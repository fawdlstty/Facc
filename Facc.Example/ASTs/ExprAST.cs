//
// This file is automatically generated by Facc
// https://github.com/fawdlstty/Facc
//

using Facc.Parser;
using System;
using System.Collections.Generic;
using System.Linq;

namespace Facc.Example.ASTs {
	public class ExprAST: IAST {
		// expr ::= num | op0_expr | op2_expr

		public AstParser Parser { init; get; }

		public IEnumerator<int> TryParse (int _pos) {
			if (!Parser.TryReg ("ExprAST", _pos))
				yield break;
			var _0_enum = _try_parse_0 (_pos);
			while (_0_enum.MoveNext ()) {
				ValidIndex = 0;
				yield return _0_enum.Current;
			}
			var _1_enum = _try_parse_1 (_pos);
			while (_1_enum.MoveNext ()) {
				ValidIndex = 1;
				yield return _1_enum.Current;
			}
			var _2_enum = _try_parse_2 (_pos);
			while (_2_enum.MoveNext ()) {
				ValidIndex = 2;
				yield return _2_enum.Current;
			}
			Parser.UnReg ("ExprAST", _pos);
		}

		IEnumerator<int> _try_parse_0 (int _pos) {
			Parser.ErrorPos = _pos;
			var _o = new NumAST { Parser = Parser };
			var _enum = _o.TryParse (_pos);
			while (_enum.MoveNext ()) {
				Value_0 = _o;
				yield return _enum.Current;
				Value_0 = null;
			}
		}

		IEnumerator<int> _try_parse_1 (int _pos) {
			Parser.ErrorPos = _pos;
			var _o = new Op0ExprAST { Parser = Parser };
			var _enum = _o.TryParse (_pos);
			while (_enum.MoveNext ()) {
				Value_1 = _o;
				yield return _enum.Current;
				Value_1 = null;
			}
		}

		IEnumerator<int> _try_parse_2 (int _pos) {
			Parser.ErrorPos = _pos;
			var _o = new Op2ExprAST { Parser = Parser };
			var _enum = _o.TryParse (_pos);
			while (_enum.MoveNext ()) {
				Value_2 = _o;
				yield return _enum.Current;
				Value_2 = null;
			}
		}

		public bool IsValid () => ValidIndex >= 0;

		public void PrintTree (int _indent) {
			//Console.WriteLine ($"{new string (' ', _indent * 4)}ExprAST");
			if (ValidIndex == 0) {
				if (Value_0 != null && Value_0.IsValid ()) {
					Value_0.PrintTree (_indent + 1);
				}
			} else if (ValidIndex == 1) {
				if (Value_1 != null && Value_1.IsValid ()) {
					Value_1.PrintTree (_indent + 1);
				}
			} else if (ValidIndex == 2) {
				if (Value_2 != null && Value_2.IsValid ()) {
					Value_2.PrintTree (_indent + 1);
				}
			}
		}

		public int Length { get => (Value_0 != null ? Value_0.Length : 0) + (Value_1 != null ? Value_1.Length : 0) + (Value_2 != null ? Value_2.Length : 0); }

		public NumAST Value_0 { get; set; } = null;
		public Op0ExprAST Value_1 { get; set; } = null;
		public Op2ExprAST Value_2 { get; set; } = null;
		public int ValidIndex { get; set; } = -1;

		public void Process () {
			while (ValidIndex == 1) {
				(Value_0, Value_1, Value_2, ValidIndex) = (Value_1.Value_1.Value_0, Value_1.Value_1.Value_1, Value_1.Value_1.Value_2, Value_1.Value_1.ValidIndex);
			}
			if (ValidIndex == 2) {
				Value_2.Process ();
			}
		}
	}
}
