//
// This file is automatically generated by Facc
// https://github.com/fawdlstty/Facc
//

using Facc.Parser;
using System;
using System.Collections.Generic;
using System.Linq;

namespace Facc.Example.ASTs {
	public class Op2SignAST: IAST {
		// op2_sign ::= '+' | '-' | '*' | '/'

		public AstParser Parser { init; get; }

		public IEnumerator<int> TryParse (int _pos) {
			if (!Parser.TryReg ("Op2SignAST", _pos))
				yield break;
			var _0_enum = _try_parse_0 (_pos);
			while (_0_enum.MoveNext ()) {
				ValidIndex = 0;
				yield return _0_enum.Current;
			}
			var _1_enum = _try_parse_1 (_pos);
			while (_1_enum.MoveNext ()) {
				ValidIndex = 1;
				yield return _1_enum.Current;
			}
			var _2_enum = _try_parse_2 (_pos);
			while (_2_enum.MoveNext ()) {
				ValidIndex = 2;
				yield return _2_enum.Current;
			}
			var _3_enum = _try_parse_3 (_pos);
			while (_3_enum.MoveNext ()) {
				ValidIndex = 3;
				yield return _3_enum.Current;
			}
			Parser.UnReg ("Op2SignAST", _pos);
		}


		IEnumerator<int> _try_parse_0 (int _pos) {
			if (Parser.TryMatchString (_pos, "+")) {
				Value_0 = "+";
				yield return _pos + Value_0.Length;
				Value_0 = "";
			}
		}


		IEnumerator<int> _try_parse_1 (int _pos) {
			if (Parser.TryMatchString (_pos, "-")) {
				Value_1 = "-";
				yield return _pos + Value_1.Length;
				Value_1 = "";
			}
		}


		IEnumerator<int> _try_parse_2 (int _pos) {
			if (Parser.TryMatchString (_pos, "*")) {
				Value_2 = "*";
				yield return _pos + Value_2.Length;
				Value_2 = "";
			}
		}


		IEnumerator<int> _try_parse_3 (int _pos) {
			if (Parser.TryMatchString (_pos, "/")) {
				Value_3 = "/";
				yield return _pos + Value_3.Length;
				Value_3 = "";
			}
		}

		public bool IsValid () => ValidIndex >= 0;

		public void PrintTree (int _indent) {
			Console.WriteLine ($"{new string (' ', _indent * 4)}Op2SignAST");
			if (ValidIndex == 0) {
				Console.WriteLine ($"{new string (' ', (_indent + 1) * 4)}[{Value_0}]");
			} else if (ValidIndex == 1) {
				Console.WriteLine ($"{new string (' ', (_indent + 1) * 4)}[{Value_1}]");
			} else if (ValidIndex == 2) {
				Console.WriteLine ($"{new string (' ', (_indent + 1) * 4)}[{Value_2}]");
			} else if (ValidIndex == 3) {
				Console.WriteLine ($"{new string (' ', (_indent + 1) * 4)}[{Value_3}]");
			}
		}

		public int Length { get => Value_0.Length + Value_1.Length + Value_2.Length + Value_3.Length; }

		public string Value_0 { get; set; } = "";
		public string Value_1 { get; set; } = "";
		public string Value_2 { get; set; } = "";
		public string Value_3 { get; set; } = "";
		public int ValidIndex { get; set; } = -1;
	}
}
