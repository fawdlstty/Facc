//
// This file is automatically generated by Facc
// https://github.com/fawdlstty/Facc
//

using Facc.Parser;
using System;
using System.Collections.Generic;
using System.Linq;

namespace Facc.Example.ASTs {
	public class Op0ExprAST: IAST {
		// op0_expr ::= '(' expr ')'

		public AstParser Parser { init; get; }

		public IEnumerator<int> TryParse (int _pos) {
			if (!Parser.TryReg ("Op0ExprAST", _pos))
				yield break;
			var _0_enum = _try_parse_0 (_pos);
			while (_0_enum.MoveNext ()) {
				var _1_enum = _try_parse_1 (_0_enum.Current);
				while (_1_enum.MoveNext ()) {
					var _2_enum = _try_parse_2 (_1_enum.Current);
					while (_2_enum.MoveNext ()) {
						yield return _2_enum.Current;
					}
				}
			}
			Parser.UnReg ("Op0ExprAST", _pos);
		}


		IEnumerator<int> _try_parse_0 (int _pos) {
			Parser.ErrorPos = _pos;
			if (Parser.TryMatchString (_pos, "(")) {
				Value_0 = "(";
				yield return _pos + Value_0.Length;
				Value_0 = "";
			}
		}


		IEnumerator<int> _try_parse_1 (int _pos) {
			Parser.ErrorPos = _pos;
			var _o = new ExprAST { Parser = Parser };
			var _enum = _o.TryParse (_pos);
			while (_enum.MoveNext ()) {
				Value_1 = _o;
				yield return _enum.Current;
				Value_1 = null;
			}
		}


		IEnumerator<int> _try_parse_2 (int _pos) {
			Parser.ErrorPos = _pos;
			if (Parser.TryMatchString (_pos, ")")) {
				Value_2 = ")";
				yield return _pos + Value_2.Length;
				Value_2 = "";
			}
		}

		public bool IsValid () => (!string.IsNullOrEmpty (Value_0) && (Value_1 != null && Value_1.IsValid ()) && !string.IsNullOrEmpty (Value_2));

		public void PrintTree (int _indent) {
			Console.WriteLine ($"{new string (' ', _indent * 4)}Op0ExprAST");
			Console.WriteLine ($"{new string (' ', (_indent + 1) * 4)}[{Value_0}]");
			if (Value_1 != null && Value_1.IsValid ()) {
				Value_1.PrintTree (_indent + 1);
			}
			Console.WriteLine ($"{new string (' ', (_indent + 1) * 4)}[{Value_2}]");
		}

		public int Length { get => Value_0.Length + (Value_1 != null ? Value_1.Length : 0) + Value_2.Length; }

		public string Value_0 { get; set; } = "";
		public ExprAST Value_1 { get; set; } = null;
		public string Value_2 { get; set; } = "";
	}
}
