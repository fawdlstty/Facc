//
// This file is automatically generated by Facc
// https://github.com/fawdlstty/Facc
//

using Facc.Parser;
using System;
using System.Collections.Generic;
using System.Linq;

namespace Facc.Example.ASTs {
	public class Op2ExprAST: IAST {
		// op2_expr ::= expr (op2_sign expr)+

		public AstParser Parser { init; get; }

		public IEnumerator<int> TryParse (int _pos) {
			if (!Parser.TryReg ("Op2ExprAST", _pos))
				yield break;
			var _0_enum = _try_parse_0 (_pos);
			while (_0_enum.MoveNext ()) {
				var _1_enum = _try_parse_1 (_0_enum.Current);
				while (_1_enum.MoveNext ()) {
					yield return _1_enum.Current;
				}
			}
			Parser.UnReg ("Op2ExprAST", _pos);
		}


		IEnumerator<int> _try_parse_0 (int _pos) {
			Parser.ErrorPos = _pos;
			var _o = new ExprAST { Parser = Parser };
			var _enum = _o.TryParse (_pos);
			while (_enum.MoveNext ()) {
				Value_0 = _o;
				yield return _enum.Current;
				Value_0 = null;
			}
		}

		IEnumerator<int> _try_parse_1 (int _pos) {
			Parser.ErrorPos = _pos;
			var _o = new Op2ExprAST_1 { Parser = Parser };
			var _enum = _o.TryParse (_pos);
			int _list_pos = Value_1.Count;
			while (_enum.MoveNext ()) {
				Value_1.Add (_o);
				yield return _enum.Current;
				var _enum1 = _try_parse_1 (_enum.Current);
				while (_enum1.MoveNext ())
					yield return _enum1.Current;
				Value_1.RemoveAt (_list_pos);
			}
		}

		public bool IsValid () => ((Value_0 != null && Value_0.IsValid ()) && Value_1.Count > 0);

		public void PrintTree (int _indent) {
			Console.WriteLine ($"{new string (' ', _indent * 4)}Op2ExprAST");
			if (Value_0 != null && Value_0.IsValid ()) {
				Value_0.PrintTree (_indent + 1);
			}
			for (int i = 0; i < Value_1.Count; ++i)
				Value_1 [i].PrintTree (_indent + 1);
		}

		public int Length { get => (Value_0 != null ? Value_0.Length : 0) + (from p in Value_1 select p.Length).Sum (); }

		public ExprAST Value_0 { get; set; } = null;
		public List<Op2ExprAST_1> Value_1 { get; set; } = new List<Op2ExprAST_1> ();
	}

	public class Op2ExprAST_1: IAST {
		// [part of] op2_expr ::= (op2_sign expr)+

		public AstParser Parser { init; get; }

		public IEnumerator<int> TryParse (int _pos) {
			if (!Parser.TryReg ("Op2ExprAST_1", _pos))
				yield break;
			var _1_0_enum = _try_parse_1_0 (_pos);
			while (_1_0_enum.MoveNext ()) {
				var _1_1_enum = _try_parse_1_1 (_1_0_enum.Current);
				while (_1_1_enum.MoveNext ()) {
					yield return _1_1_enum.Current;
				}
			}

			Parser.UnReg ("Op2ExprAST_1", _pos);
		}


		IEnumerator<int> _try_parse_1_0 (int _pos) {
			Parser.ErrorPos = _pos;
			var _o = new Op2SignAST { Parser = Parser };
			var _enum = _o.TryParse (_pos);
			while (_enum.MoveNext ()) {
				Value_1_0 = _o;
				yield return _enum.Current;
				Value_1_0 = null;
			}
		}


		IEnumerator<int> _try_parse_1_1 (int _pos) {
			Parser.ErrorPos = _pos;
			var _o = new ExprAST { Parser = Parser };
			var _enum = _o.TryParse (_pos);
			while (_enum.MoveNext ()) {
				Value_1_1 = _o;
				yield return _enum.Current;
				Value_1_1 = null;
			}
		}

		public bool IsValid () => ((Value_1_0 != null && Value_1_0.IsValid ()) && (Value_1_1 != null && Value_1_1.IsValid ()));

		public void PrintTree (int _indent) {
			Console.WriteLine ($"{new string (' ', _indent * 4)}Op2ExprAST_1");
			if (Value_1_0 != null && Value_1_0.IsValid ()) {
				Value_1_0.PrintTree (_indent + 1);
			}
			if (Value_1_1 != null && Value_1_1.IsValid ()) {
				Value_1_1.PrintTree (_indent + 1);
			}
		}

		public int Length { get => (Value_1_0 != null ? Value_1_0.Length : 0) + (Value_1_1 != null ? Value_1_1.Length : 0); }

		public Op2SignAST Value_1_0 { get; set; } = null;
		public ExprAST Value_1_1 { get; set; } = null;
	}
}
