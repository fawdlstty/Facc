//
// This file is automatically generated by Facc
// https://github.com/fawdlstty/Facc
//

using Facc.Parser;
using System;
using System.Collections.Generic;
using System.Linq;

namespace Facc.Example.ASTs {
	public class Op2ExprAST: IAST {
		// op2_expr ::= expr (op2_sign expr)+

		public AstParser Parser { init; get; }

		public IEnumerator<int> TryParse (int _pos) {
			if (!Parser.TryReg ("Op2ExprAST", _pos))
				yield break;
			var _0_enum = _try_parse_0 (_pos);
			while (_0_enum.MoveNext ()) {
				var _1_enum = _try_parse_1 (_0_enum.Current);
				while (_1_enum.MoveNext ()) {
					yield return _1_enum.Current;
				}
			}
			Parser.UnReg ("Op2ExprAST", _pos);
		}

		IEnumerator<int> _try_parse_0 (int _pos) {
			Parser.ErrorPos = _pos;
			var _o = new ExprAST { Parser = Parser };
			var _enum = _o.TryParse (_pos);
			while (_enum.MoveNext ()) {
				Value_0 = _o;
				yield return _enum.Current;
				Value_0 = null;
			}
		}

		IEnumerator<int> _try_parse_1 (int _pos) {
			Parser.ErrorPos = _pos;
			var _o = new Op2ExprAST_1 { Parser = Parser };
			var _enum = _o.TryParse (_pos);
			while (_enum.MoveNext ()) {
				int _list_pos = Value_1.Count;
				Value_1.Add (_o);
				yield return _enum.Current;
				var _enum1 = _try_parse_1 (_enum.Current);
				while (_enum1.MoveNext ())
					yield return _enum1.Current;
				Value_1.RemoveAt (_list_pos);
			}
		}

		public bool IsValid () => ((Value_0 != null && Value_0.IsValid ()) && Value_1.Count > 0);

		public void PrintTree (int _indent) {
			//Console.WriteLine ($"{new string (' ', _indent * 4)}Op2ExprAST");
			if (Value_0 != null && Value_0.IsValid ()) {
				Value_0.PrintTree (_indent + 1);
			}
			for (int i = 0; i < Value_1.Count; ++i)
				Value_1 [i].PrintTree (_indent + 1);
		}

		public int Length { get => (Value_0 != null ? Value_0.Length : 0) + (from p in Value_1 select p.Length).Sum (); }

		public ExprAST Value_0 { get; set; } = null;
		public List<Op2ExprAST_1> Value_1 { get; set; } = new List<Op2ExprAST_1> ();

		private static Dictionary<string, int> s_level = new Dictionary<string, int> {
			["+"] = 10,
			["-"] = 10,
			["*"] = 20,
			["/"] = 20,
		};

		public void Process () {
			while (Value_1.Count > 1) {
				int _pos = 0;
				string _sign = Value_1 [0].Value_1_0.Sign;
				for (int i = 1; i < Value_1.Count; ++i) {
					if (s_level[Value_1[i].Value_1_0.Sign] > s_level[_sign]) {
						_sign = Value_1[i].Value_1_0.Sign;
						_pos = i;
					}
				}
				if (_pos == 0) {
					Value_0 = new ExprAST {
						ValidIndex = 2, Value_2 = new Op2ExprAST {
							Value_0 = Value_0,
							Value_1 = new List<Op2ExprAST_1> { Value_1[0], },
						}
					};
					Value_1.RemoveAt (0);
				} else {
					Value_1[_pos - 1] = new Op2ExprAST_1 {
						Value_1_0 = Value_1[_pos - 1].Value_1_0,
						Value_1_1 = new ExprAST {
							ValidIndex = 2, Value_2 = new Op2ExprAST {
								Value_0 = Value_1[_pos - 1].Value_1_1,
								Value_1 = new List<Op2ExprAST_1> { Value_1[_pos], },
							}
						},
					};
					Value_1.RemoveAt (_pos);
				}
			}
			Value_0.Process ();
			Value_1[0].Value_1_1.Process ();
		}
	}

	public class Op2ExprAST_1: IAST {
		// [part of] op2_expr ::= (op2_sign expr)+

		public AstParser Parser { init; get; }

		public IEnumerator<int> TryParse (int _pos) {
			if (!Parser.TryReg ("Op2ExprAST_1", _pos))
				yield break;
			var _1_0_enum = _try_parse_1_0 (_pos);
			while (_1_0_enum.MoveNext ()) {
				var _1_1_enum = _try_parse_1_1 (_1_0_enum.Current);
				while (_1_1_enum.MoveNext ()) {
					yield return _1_1_enum.Current;
				}
			}

			Parser.UnReg ("Op2ExprAST_1", _pos);
		}

		IEnumerator<int> _try_parse_1_0 (int _pos) {
			Parser.ErrorPos = _pos;
			var _o = new Op2SignAST { Parser = Parser };
			var _enum = _o.TryParse (_pos);
			while (_enum.MoveNext ()) {
				Value_1_0 = _o;
				yield return _enum.Current;
				Value_1_0 = null;
			}
		}

		IEnumerator<int> _try_parse_1_1 (int _pos) {
			Parser.ErrorPos = _pos;
			var _o = new ExprAST { Parser = Parser };
			var _enum = _o.TryParse (_pos);
			while (_enum.MoveNext ()) {
				Value_1_1 = _o;
				yield return _enum.Current;
				Value_1_1 = null;
			}
		}

		public bool IsValid () => ((Value_1_0 != null && Value_1_0.IsValid ()) && (Value_1_1 != null && Value_1_1.IsValid ()));

		public void PrintTree (int _indent) {
			//Console.WriteLine ($"{new string (' ', _indent * 4)}Op2ExprAST_1");
			if (Value_1_0 != null && Value_1_0.IsValid ()) {
				Value_1_0.PrintTree (_indent + 1);
			}
			if (Value_1_1 != null && Value_1_1.IsValid ()) {
				Value_1_1.PrintTree (_indent + 1);
			}
		}

		public int Length { get => (Value_1_0 != null ? Value_1_0.Length : 0) + (Value_1_1 != null ? Value_1_1.Length : 0); }

		public Op2SignAST Value_1_0 { get; set; } = null;
		public ExprAST Value_1_1 { get; set; } = null;
	}
}
